# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

def find_triangle(counter)
	((counter*counter) + counter)/2
end

def divisors(number)
  count = 0
  root = Math.sqrt(number)
  (1..root).each do |n|
    if number % n == 0
      count += 2
    end
  end
  if root * root == number
    count -= 1
  end
  count
end

# Because I already know the answer I can pre-set the counter for testing purposes.
# Normally it would start at 1.
counter = 12375
triangle = find_triangle(counter)

while divisors(triangle) < 500
	counter += 1
	triangle = find_triangle(counter)
end

puts triangle